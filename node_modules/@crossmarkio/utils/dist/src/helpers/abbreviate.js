"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.abbreviateNumber = void 0;
const BN = __importStar(require("big.js"));
const abbreviateNumber = (value) => {
    if (!value)
        return;
    if (value.length < 9)
        return value;
    let suffixes = ['', 'K', 'M', 'b', 'T'];
    let whole = value.split('.')[0];
    let suffix = suffixes[0];
    if (whole.length > 3)
        suffix = suffixes[1];
    if (whole.length > 6)
        suffix = suffixes[2];
    if (whole.length > 9)
        suffix = suffixes[3];
    if (whole.length > 12)
        suffix = suffixes[4];
    let parsed = whole;
    let decimal = '';
    if (suffix === suffixes[0])
        parsed = value;
    if (suffix === suffixes[1]) {
        parsed = parsed.slice(0, parsed.length - 3);
        let digits = BN.default(value).div(BN.default(1000)).toString().split('.')[1]?.slice(0, 6);
        if (digits)
            decimal = '.' + digits;
    }
    if (suffix === suffixes[2]) {
        parsed = parsed.slice(0, parsed.length - 6);
        let digits = BN.default(value).div(BN.default(1000000)).toString().split('.')[1]?.slice(0, 6);
        if (digits)
            decimal = '.' + digits;
    }
    if (suffix === suffixes[3]) {
        parsed = parsed.slice(0, parsed.length - 9);
        let digits = BN.default(value)
            .div(BN.default(1000000000))
            .toString()
            .split('.')[1]
            ?.slice(0, 6);
        if (digits)
            decimal = '.' + digits;
    }
    if (suffix === suffixes[4]) {
        parsed = parsed.slice(0, parsed.length - 12);
        let digits = BN.default(value)
            .div(BN.default(1000000000000))
            .toString()
            .split('.')[1]
            ?.slice(0, 6);
        if (digits)
            decimal = '.' + digits;
    }
    return parsed + decimal + suffix;
};
exports.abbreviateNumber = abbreviateNumber;
//# sourceMappingURL=abbreviate.js.map