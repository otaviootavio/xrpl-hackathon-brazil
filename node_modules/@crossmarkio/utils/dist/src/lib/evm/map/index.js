"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapXrplToEvm = exports.mapXrplSecretToEvm = exports.XEvmWallet = void 0;
// src/index.ts
const xrpl = __importStar(require("xrpl"));
const eth = __importStar(require("ethereumjs-util"));
function mapXrplSecretToEvm(xrpl_secret_key) {
    const xrpl_wallet = xrpl.Wallet.fromSeed(xrpl_secret_key);
    const secretKeyToHex = Buffer.from(xrpl_secret_key, 'utf8').toString('hex');
    const padded_secret_key = secretKeyToHex.padStart(64, '0');
    const mapped_private_key = Buffer.from(padded_secret_key, 'hex');
    const public_key = eth.privateToPublic(mapped_private_key).toString('hex');
    const public_address = eth.privateToAddress(mapped_private_key).toString('hex');
    const mapped_wallet = {
        xrpl_address: xrpl_wallet.address,
        xrpl_secret: xrpl_wallet.seed,
        mapped_evm_private_key: mapped_private_key.toString('hex').toUpperCase(),
        mapped_evm_public_key: public_key.toUpperCase(),
        mapped_evm_public_address: `0x${public_address}`,
    };
    return mapped_wallet;
}
exports.mapXrplSecretToEvm = mapXrplSecretToEvm;
function mapXrplToEvm(input) {
    let keypair;
    if (input.opts)
        keypair = xrpl.Wallet.fromSeed(input.opts.secret);
    const xrpl_wallet = new xrpl.Wallet((keypair == null ? void 0 : keypair.publicKey) || input.publicKey, (keypair == null ? void 0 : keypair.privateKey) || input.privateKey);
    const private_key_buffer = Buffer.from(xrpl_wallet.privateKey, 'hex');
    const public_key = eth.privateToPublic(private_key_buffer).toString('hex');
    const public_address = eth.privateToAddress(private_key_buffer).toString('hex');
    const mapped_wallet = {
        mapped_evm_private_key: (keypair == null ? void 0 : keypair.privateKey) || input.privateKey,
        mapped_evm_public_key: public_key.toUpperCase(),
        mapped_evm_public_address: `0x${public_address}`,
    };
    return mapped_wallet;
}
exports.mapXrplToEvm = mapXrplToEvm;
class XEvmWallet {
    publicKey;
    privateKey;
    address;
    constructor(publicKey, privateKey) {
        this.publicKey = mapXrplToEvm({
            publicKey,
            privateKey,
        }).mapped_evm_public_key;
        this.privateKey = privateKey;
        this.address = mapXrplToEvm({
            publicKey,
            privateKey,
        }).mapped_evm_public_address;
    }
    fromSeed = (seed) => {
        return {
            publicKey: mapXrplSecretToEvm(seed).mapped_evm_public_key,
            privateKey: mapXrplSecretToEvm(seed).mapped_evm_private_key,
            address: mapXrplSecretToEvm(seed).mapped_evm_public_address,
        };
    };
}
exports.XEvmWallet = XEvmWallet;
//# sourceMappingURL=index.js.map