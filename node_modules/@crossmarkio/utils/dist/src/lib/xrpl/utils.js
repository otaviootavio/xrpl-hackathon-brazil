"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseQuality = exports.getAffectedAccounts = exports.parseCurrencyAmount = exports.parseEscrowID = exports.normalizeNodes = void 0;
const _ = __importStar(require("lodash"));
const Big = __importStar(require("big.js"));
const xrpl = __importStar(require("xrpl"));
const hexConversion_1 = require("./hexConversion");
function normalizeNode(affectedNode) {
    var diffType = Object.keys(affectedNode)[0];
    // @ts-ignore
    var node = affectedNode[diffType];
    return Object.assign({
        node,
        diffType: diffType,
        entryType: node.LedgerEntryType,
        ledgerIndex: node.LedgerIndex,
    });
}
function normalizeNodes(metadata) {
    if (!metadata.AffectedNodes)
        return [];
    return metadata.AffectedNodes.map(normalizeNode);
}
exports.normalizeNodes = normalizeNodes;
function parseCurrencyAmount(currencyAmount) {
    if (typeof currencyAmount === 'string')
        return xrpl.dropsToXrp(Big.default(currencyAmount));
    return {
        currency: (0, hexConversion_1.currencyHexToUTF8)(currencyAmount.currency),
        issuer: currencyAmount.issuer,
        value: currencyAmount.value,
    };
}
exports.parseCurrencyAmount = parseCurrencyAmount;
function isAccountField(fieldName) {
    var fieldNames = ['Account', 'Owner', 'Destination', 'Issuer', 'Target'];
    return _.includes(fieldNames, fieldName);
}
function isAmountFieldAffectingIssuer(fieldName) {
    var fieldNames = ['LowLimit', 'HighLimit', 'TakerPays', 'TakerGets'];
    return _.includes(fieldNames, fieldName);
}
function getAffectedAccounts(metadata) {
    let accounts = [];
    _.forEach(normalizeNodes(metadata), (node) => {
        var fields = node.diffType === 'CreatedNode' ? node.node.newFields : node.node.finalFields;
        _.forEach(fields, function (fieldValue, fieldName) {
            if (isAccountField(fieldName)) {
                accounts.push(fieldValue);
            }
            else if (isAmountFieldAffectingIssuer(fieldName) && fieldValue.issuer) {
                accounts.push(fieldValue.issuer);
            }
        });
    });
    return _.uniq(accounts);
}
exports.getAffectedAccounts = getAffectedAccounts;
function adjustQualityForXRP(quality, pays, gets) {
    var numeratorShift = pays === 'XRP' ? -6 : 0;
    var denominatorShift = gets === 'XRP' ? -6 : 0;
    var shift = numeratorShift - denominatorShift;
    return shift === 0 ? Big.default(quality) : Big.default(quality).times(Big.default(10 ** shift));
}
function parseQuality(bookDirectory, pays, gets) {
    var qualityHex = bookDirectory.substring(bookDirectory.length - 16);
    var mantissa = Big.default(parseInt(qualityHex.substring(2)));
    var offset = parseInt(qualityHex.substring(0, 2), 16) - 100;
    var quality = mantissa.toString() + 'e' + offset.toString();
    return adjustQualityForXRP(quality, pays, gets);
}
exports.parseQuality = parseQuality;
const parseEscrowID = (id, account) => {
    let int = BigInt('0x' + id);
    let acc_int = BigInt('0x' + account);
    return BigInt('0x' + id) >> 152n === 0x03n;
};
exports.parseEscrowID = parseEscrowID;
//# sourceMappingURL=utils.js.map