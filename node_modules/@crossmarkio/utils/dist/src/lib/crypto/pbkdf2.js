"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBKDF2 = void 0;
const forge = __importStar(require("node-forge"));
const typings_1 = __importDefault(require("@crossmarkio/typings"));
const Types = typings_1.default.schema.latest.Types;
class PBKDF2 {
    type = Types.Security.AlgoTypes.pbkdf2;
    iterations = 60000;
    keylet = 64;
    iv = forge.util.bytesToHex(forge.random.getBytesSync(128));
    constructor(opts) {
        if (opts?.iv)
            this.iv = opts.iv;
        if (opts?.iterations)
            this.iterations = opts.iterations;
        if (opts?.keylet)
            this.keylet = opts.keylet;
    }
    encrypt = ({ key, size }) => new Promise((resolve, reject) => {
        let s = size || this.keylet;
        let bytes = forge.pkcs5.pbkdf2(key, this.iv, this.iterations, s, 'sha512');
        resolve({ bytes, hex: forge.util.bytesToHex(bytes) });
    });
}
exports.PBKDF2 = PBKDF2;
//# sourceMappingURL=pbkdf2.js.map