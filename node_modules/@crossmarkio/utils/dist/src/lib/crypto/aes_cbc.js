"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AES_CBC = void 0;
const forge = __importStar(require("node-forge"));
const pbkdf2_1 = require("./pbkdf2");
const string_1 = require("../../helpers/string");
const typings_1 = __importDefault(require("@crossmarkio/typings"));
const Types = typings_1.default.schema.latest.Types;
class AES_CBC {
    algo = 'AES-CBC';
    type = Types.Security.AlgoTypes.aes_cbc;
    iv = forge.util.bytesToHex(forge.random.getBytesSync(128));
    derivation = new pbkdf2_1.PBKDF2();
    constructor(opts) {
        if (opts?.iv)
            this.iv = opts.iv;
        if (opts?.derivation)
            this.derivation = new pbkdf2_1.PBKDF2(opts.derivation);
    }
    // An encrypt function
    encrypt = ({ key, data }) => new Promise(async (resolve, reject) => {
        // Creating Cipheriv with its parameter
        let cipher = forge.cipher.createCipher(this.algo, (await this.derivation.encrypt({ key, size: 32 })).bytes);
        cipher.start({ iv: this.iv });
        cipher.update(forge.util.createBuffer(data));
        cipher.finish();
        resolve({ bytes: cipher.output.data, hex: cipher.output.toHex() });
    });
    decrypt = ({ key, hex }) => new Promise(async (resolve, reject) => {
        let decipher = forge.cipher.createDecipher(this.algo, (await this.derivation.encrypt({ key, size: 32 })).bytes);
        decipher.start({ iv: this.iv });
        decipher.update(forge.util.createBuffer(forge.util.hexToBytes(hex)));
        decipher.finish();
        resolve({
            bytes: forge.util.hexToBytes(decipher.output.data),
            hex: decipher.output.toHex(),
            data: string_1.HexEncoding.toString(decipher.output.toHex()),
        });
    });
}
exports.AES_CBC = AES_CBC;
//# sourceMappingURL=aes_cbc.js.map