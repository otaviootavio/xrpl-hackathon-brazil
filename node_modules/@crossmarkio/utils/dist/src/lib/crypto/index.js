"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.helper = exports.Standard = exports.PBKDF2 = exports.AES_CBC = exports.AES_GCM = void 0;
const CryptoJS = __importStar(require("crypto-js"));
const Bip39 = __importStar(require("bip39"));
const Bip32 = __importStar(require("bip32"));
const aes_gcm_1 = require("./aes_gcm");
Object.defineProperty(exports, "AES_GCM", { enumerable: true, get: function () { return aes_gcm_1.AES_GCM; } });
const aes_cbc_1 = require("./aes_cbc");
Object.defineProperty(exports, "AES_CBC", { enumerable: true, get: function () { return aes_cbc_1.AES_CBC; } });
const pbkdf2_1 = require("./pbkdf2");
Object.defineProperty(exports, "PBKDF2", { enumerable: true, get: function () { return pbkdf2_1.PBKDF2; } });
const standard_1 = require("./standard");
Object.defineProperty(exports, "Standard", { enumerable: true, get: function () { return standard_1.Standard; } });
const generateVector = (iv) => CryptoJS.enc.Utf8.parse(iv || '8080808080808080');
const helper = {
    generateRandomMnuemonic: () => {
        const mnemonic = Bip39.generateMnemonic();
        return mnemonic;
    },
    hash256: (message) => CryptoJS.SHA256(message).toString(),
    hash512: (message) => CryptoJS.SHA512(message).toString(),
    hmac256: (message, key) => CryptoJS.HmacSHA256(message, key).toString(),
    hmac512: (message, key) => CryptoJS.HmacSHA512(message, key).toString(),
    deriveSeedFromMnemonic: (muemonic) => Bip39.mnemonicToSeed(muemonic).then((bytes) => bytes.toString('hex')),
    deriveMfromMnemonic: (muemonic) => 
    //@ts-ignore
    mnemonicToSeed(muemonic).then((bytes) => Bip32.default.fromSeed(bytes)),
    encrypt: (message, privateKey, iv) => CryptoJS.AES.encrypt(JSON.stringify({ message }), privateKey, {
        keySize: 128 / 8,
        iv: generateVector(iv),
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.Pkcs7,
    }).toString(),
    decrypt: (ciphertext, privateKey, iv) => JSON.parse(CryptoJS.enc.Utf8.stringify(CryptoJS.AES.decrypt(ciphertext, privateKey, {
        keySize: 128 / 8,
        iv: generateVector(iv),
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.Pkcs7,
    }))).message,
};
exports.helper = helper;
//# sourceMappingURL=index.js.map