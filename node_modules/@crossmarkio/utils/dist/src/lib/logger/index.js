"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const chalk = __importStar(require("chalk"));
const typings_1 = __importDefault(require("@crossmarkio/typings"));
const config = typings_1.default.crossmark.config.Config;
class Logger {
    isLogger = false;
    constructor(opts) {
        this.isLogger = opts.logger;
    }
    error = (...args) => console.log(chalk.default.red(...args));
    warn = (...args) => this.isLogger && console.log(chalk.default.yellow(...args));
    info = (...args) => this.isLogger && console.log(chalk.default.cyan(...args));
    success = (...args) => this.isLogger && console.log(chalk.default.green(...args));
    obj = {
        error: (obj) => console.log(chalk.default.red(require('util').inspect(obj, { colors: true, depth: null }))),
        warn: (obj) => this.isLogger &&
            console.log(chalk.default.yellow(require('util').inspect(obj, { colors: true, depth: null }))),
        info: (obj) => this.isLogger &&
            console.log(chalk.default.cyan(require('util').inspect(obj, { colors: true, depth: null }))),
        success: (obj) => this.isLogger &&
            console.log(chalk.default.green(require('util').inspect(obj, { colors: true, depth: null }))),
    };
}
exports.Logger = Logger;
//# sourceMappingURL=index.js.map