import { BaseParams, BaseRequest } from './baseMethod';
export interface LedgerEntryParams extends BaseParams {
    amm?: {
        asset: {
            currency: string;
            issuer?: string;
        };
        asset2: {
            currency: string;
            issuer?: string;
        };
    };
    /**
     * If true, return the requested ledger object's contents as a hex string in
     * the XRP Ledger's binary format. Otherwise, return data in JSON format. The
     * default is false.
     */
    binary?: boolean;
    index?: string;
    /**
     * Retrieve an AccountRoot object by its address. This is roughly equivalent
     * to the an {@link AccountInfoRequest}.
     */
    account_root?: string;
    /** The object ID of a Check object to retrieve. */
    check?: string;
    /**
     * Specify a DepositPreauth object to retrieve. If a string, must be the
     * object ID of the DepositPreauth object, as hexadecimal. If an object,
     * requires owner and authorized sub-fields.
     */
    deposit_preauth?: {
        /** The account that provided the preauthorization. */
        owner: string;
        /** The account that received the preauthorization. */
        authorized: string;
    } | string;
    /**
     * The DirectoryNode to retrieve. If a string, must be the object ID of the
     * directory, as hexadecimal. If an object, requires either `dir_root` o
     * Owner as a sub-field, plus optionally a `sub_index` sub-field.
     */
    directory?: {
        /** If provided, jumps to a later "page" of the DirectoryNode. */
        sub_index?: number;
        /** Unique index identifying the directory to retrieve, as a hex string. */
        dir_root?: string;
        /** Unique address of the account associated with this directory. */
        owner?: string;
    } | string;
    /**
     * The Escrow object to retrieve. If a string, must be the object ID of the
     * escrow, as hexadecimal. If an object, requires owner and seq sub-fields.
     */
    escrow?: {
        /** The owner (sender) of the Escrow object. */
        owner: string;
        /** Sequence Number of the transaction that created the Escrow object. */
        seq: number;
    } | string;
    /**
     * The Offer object to retrieve. If a string, interpret as the unique object
     * ID to the Offer. If an object, requires the sub-fields `account` and `seq`
     * to uniquely identify the offer.
     */
    offer?: {
        /** The account that placed the offer. */
        account: string;
        /** Sequence Number of the transaction that created the Offer object. */
        seq: number;
    } | string;
    /** The object ID of a PayChannel object to retrieve. */
    payment_channel?: string;
    /**
     * Object specifying the RippleState (trust line) object to retrieve. The
     * accounts and currency sub-fields are required to uniquely specify the
     * rippleState entry to retrieve.
     */
    ripple_state?: {
        /**
         * 2-length array of account Addresses, defining the two accounts linked by
         * this RippleState object.
         */
        accounts: string[];
        /** Currency Code of the RippleState object to retrieve. */
        currency: string;
    };
    /**
     * The Ticket object to retrieve. If a string, must be the object ID of the
     * Ticket, as hexadecimal. If an object, the `owner` and `ticket_sequence`
     * sub-fields are required to uniquely specify the Ticket entry.
     */
    ticket?: {
        /** The owner of the Ticket object. */
        owner: string;
        /** The Ticket Sequence number of the Ticket entry to retrieve. */
        ticket_sequence: number;
    } | string;
    /**
     * Must be the object ID of the NFToken page, as hexadecimal
     */
    nft_page?: string;
}
export interface LedgerEntryRequest extends BaseRequest {
    method: 'ledger_entry';
    params: LedgerEntryParams[];
}
