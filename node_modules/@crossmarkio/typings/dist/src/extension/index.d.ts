/// <reference types="chrome" />
import { Models } from '../crossmark/models';
import { Events } from '../crossmark/events';
import { latest } from '../schema/latest';
declare class Extension {
    static CatchAllEvent: Extension.CatchAllEvent;
    static BasicUser: Extension.BasicUser;
    static BasicNetwork: Extension.BasicNetwork;
    static CleanExtMessage: Extension.CleanExtMessage;
    static CommResponse: Extension.CommResponse;
    static CleanResponse: Extension.CleanResponse;
    static PostMessage: Extension.PostMessage;
    static PortMessage: Extension.PortMessage;
    static Payload: Extension.Payload;
    static AppStatus: Extension.AppStatus;
    static AllExtMessage: Extension.AllExtMessage;
    static ExtMessage: Extension.ExtMessage;
    static RequestMessage: Extension.RequestMessage;
    static ResponseMessage: Extension.ResponseMessage;
    static Targets: Extension.Targets;
    static Events: Extension.Events;
    static Commands: Extension.Commands;
    static Types: Extension.Types;
}
declare namespace Extension {
    export enum TYPES {
        INIT = "init",
        REFRESH = "refresh",
        DISCONNECT = "disconnect",
        PING = "ping",
        REQUEST = "request",
        RESPONSE = "response",
        UPDATE = "update",
        EVENT = "event"
    }
    export type Types = TYPES;
    export enum COMMANDS {
        VERSION = "version",
        IS_CONNECTED = "isConnected",
        IS_LOCKED = "isLocked",
        OPEN = "open",
        SIGN = "sign",
        SIGNANDSUBMIT = "sign-and-submit",
        BULKSUBMIT = "bulk-submit",
        BULKSIGN = "bulk-sign",
        BULK = "bulk",
        SUBMIT = "submit",
        MANAGER = "manager",
        ADDRESS = "address",
        NETWORK = "network",
        USER = "user",
        VERIFY = "verify",
        SENDER = "sender"
    }
    export type Commands = COMMANDS;
    export enum EVENTS {
        ACCOUNTS_CHANGED = "accountsChanged",
        CHAIN_CHANGED = "chainChanged",
        CONNECT = "connect",
        DISCONNECT = "disconnect",
        MESSAGE = "message",
        POPUP_MODE = "popup-mode",
        STATE_UPDATE = "state-update",
        NETWORK_CHANGE = "network-change",
        USER_CHANGE = "user-change",
        OPEN = "open",
        CLOSE = "close",
        PING = "ping",
        SIGNIN = "signin",
        SIGNOUT = "signout",
        RESPONSE = "response",
        ALL = "all"
    }
    export type Events = EVENTS;
    export enum TARGETS {
        CONTENT = "content",
        BG = "bg",
        POP = "pop"
    }
    export type Targets = TARGETS;
    export interface BaseMessage {
        id: string;
        target: Targets;
        type: Types;
    }
    interface BaseGeneric {
        id: string;
        target: Targets;
        type: TYPES.INIT | TYPES.UPDATE;
    }
    export type RequestMessage = BaseMessage & Models.Request;
    export type ResponseMessage = BaseMessage & Models.Response;
    export type GenericMessage = BaseGeneric;
    export type ExtMessage = RequestMessage | ResponseMessage | Events.EventMessage | GenericMessage;
    export interface Payload {
        sender: chrome.runtime.MessageSender;
        details: typeof Models.SignRequest | typeof Models.VerifyRequest | typeof Models.SignAndSubmitRequest | typeof Models.SubmitRequest | typeof Models.BulkSignRequest | typeof Models.BulkSubmitRequest | typeof Models.BulkSignAndSubmitRequest;
    }
    export interface CleanExtMessage {
        id: string;
        type: Types;
        target?: Targets;
        event?: Events;
        command?: Commands;
        data?: any;
    }
    export interface PostMessage {
        msg: ExtMessage;
        sender?: chrome.runtime.MessageSender;
    }
    export interface PortMessage {
        msg: ExtMessage;
        port?: chrome.runtime.Port;
    }
    export interface CleanResponse {
        request: CleanExtMessage;
        response: CleanExtMessage;
        createdAt: number;
        resolvedAt?: number;
    }
    export interface CommResponse {
        request: ExtMessage;
        response: ExtMessage;
        createdAt: number;
        resolvedAt?: number;
    }
    export interface AppStatus {
        port?: chrome.runtime.Port;
        sender?: chrome.runtime.MessageSender;
        createdAt: number;
        updatedAt: number;
        tabs: chrome.tabs.Tab[];
        requests: ExtMessage[];
        expiresAt?: number;
        address?: string;
        node?: string;
        user?: string;
        isConnected: boolean;
        isSignedIn: boolean;
        isExpired: boolean;
    }
    export type AllExtMessage = PostMessage | PortMessage;
    export interface BasicNetwork {
        protocol: latest.Types.Protocols;
        type: latest.Types.NodeTypes;
        wss: string;
        rpc: string;
    }
    export interface BasicUser {
        id: string;
        username: string;
        type: string;
        slug?: string;
        developer: boolean;
    }
    export interface CatchAllEvent {
        type: EVENTS;
        user?: BasicUser;
        network?: BasicNetwork;
    }
    export {};
}
export { Extension };
