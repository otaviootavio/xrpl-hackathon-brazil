"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Types = void 0;
const networks_1 = require("./networks");
const Api = __importStar(require("./api"));
const Card = __importStar(require("./card"));
const Security = __importStar(require("./security"));
const protocols_1 = require("./protocols");
class Types {
    static AllNetworks = networks_1.AllNetworks;
    static AllNodeTypes = networks_1.AllNetworks.AllNodeTypes;
    static AllNodeExplorers = networks_1.AllNetworks.AllNodeExplorers;
    static AllProtocols = protocols_1.Protocols;
    static Api = Api;
    static Card = Card.Card;
    static Security = Security.Security;
    static BasicNetwork;
    static BasicUser;
    static NodeTypes;
    static NodeExplorers;
    static Protocols;
    static Networks;
    static Icons;
    static EncryptionTypes;
    static EncryptTypes;
    static CardEncryptionTypes;
    static PasscodeEncryptionTypes;
    static availableProtocols = [protocols_1.Protocols.xrpl, protocols_1.Protocols.evm];
    static NetworkIdentifiers = {
        [networks_1.AllNetworks.NetworkLabels.xrpl]: networks_1.AllNetworks.XrplLedger,
        [networks_1.AllNetworks.NetworkLabels.xevm]: networks_1.AllNetworks.Xevm,
        [networks_1.AllNetworks.NetworkLabels.xahau]: networks_1.AllNetworks.Xahau,
    };
}
exports.Types = Types;
//# sourceMappingURL=index.js.map