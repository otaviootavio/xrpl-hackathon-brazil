import { Protocols } from '../protocols';
import { AllNetworks } from '../networks';
declare class Card {
    static MappedAddresses: Card.MappedAddresses;
    static ThemeArray: Card.ThemeArray;
    static Color: Card.Color;
}
declare namespace Card {
    enum TWCardColor {
        color1 = "tw-bg-cardGradient1",
        color2 = "tw-bg-cardGradient2",
        color3 = "tw-bg-cardGradient3",
        color4 = "tw-bg-cardGradient4",
        color5 = "tw-bg-cardGradient5",
        color6 = "tw-bg-cardGradient6",
        color7 = "tw-bg-cardGradient7",
        color8 = "tw-bg-cardGradient8",
        color9 = "tw-bg-cardGradient9",
        color10 = "tw-bg-cardGradient10"
    }
    enum cardColorTheme {
        dark = "Dark",
        light = "Light"
    }
    const cardColorBg: {
        Light: string;
        Dark: string;
    };
    const cardColorStroke: {
        Light: string;
        Dark: string;
    };
    const cardColorText: {
        Light: string;
        Dark: string;
    };
    const cardColorFill: {
        Light: string;
        Dark: string;
    };
    enum CardColor {
        color1 = "color1",
        color2 = "color2",
        color3 = "color3",
        color4 = "color4",
        color5 = "color5",
        color6 = "color6",
        color7 = "color7",
        color8 = "color8",
        color9 = "color9",
        color10 = "color10"
    }
    type Color = CardColor;
    interface ThemeArray {
        protocol: Protocols;
        type: AllNetworks.NodeTypes;
        color: Color;
        skin?: string;
    }
    type Algorithm = 'secp256k1' | 'ed25519' | null;
    interface MappedAddresses {
        protocol: Protocols;
        address: string;
        regularKey?: string;
        publicKey?: string | null;
        path?: string | null;
        algorithm?: Algorithm;
    }
}
export { Card };
