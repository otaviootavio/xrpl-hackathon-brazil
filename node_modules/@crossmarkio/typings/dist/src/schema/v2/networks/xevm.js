"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XevmNetwork = void 0;
const protocols_1 = require("../protocols");
const icons_1 = require("./common/icons");
const labels_1 = require("./common/labels");
class XevmNetwork {
    static protocol = protocols_1.Protocols.evm;
    static Types;
    static label = labels_1.NetworkLabels.xevm;
    static icon = icons_1.NetworkIcons.xevm;
    static asset = 'ETH';
    static active = false;
    static defaultReserves = {
        base: '0',
        inc: '0',
    };
}
exports.XevmNetwork = XevmNetwork;
(function (XevmNetwork) {
    let NetworkTypes;
    (function (NetworkTypes) {
        NetworkTypes["mainnet"] = "mainnet";
        NetworkTypes["testnet"] = "testnet";
        NetworkTypes["devnet"] = "devnet";
    })(NetworkTypes = XevmNetwork.NetworkTypes || (XevmNetwork.NetworkTypes = {}));
    let Explorers;
    (function (Explorers) {
        Explorers["peersyst"] = "peersyst";
    })(Explorers = XevmNetwork.Explorers || (XevmNetwork.Explorers = {}));
    XevmNetwork.colors = {
        [XevmNetwork.NetworkTypes.mainnet]: 'tw-bg-[#38DBFF]',
        [XevmNetwork.NetworkTypes.testnet]: 'tw-bg-[#DE7EFF]',
        [XevmNetwork.NetworkTypes.devnet]: 'tw-bg-[#FFB648]',
    };
    XevmNetwork.PeersysHost = {
        [XevmNetwork.NetworkTypes.mainnet]: '',
        [XevmNetwork.NetworkTypes.testnet]: '',
        [XevmNetwork.NetworkTypes.devnet]: 'https://evm-sidechain.xrpl.org',
    };
    XevmNetwork.Hosts = {
        [XevmNetwork.Explorers.peersyst]: XevmNetwork.PeersysHost,
    };
    XevmNetwork.ExplorerAddressPath = {
        [XevmNetwork.Explorers.peersyst]: '/address',
    };
    XevmNetwork.ExplorerTxPath = {
        [XevmNetwork.Explorers.peersyst]: '/tx',
    };
    XevmNetwork.getExplorerHost = (explorer, type) => {
        if (explorer === XevmNetwork.Explorers.peersyst)
            return XevmNetwork.PeersysHost[type];
        return;
    };
    XevmNetwork.getExplorerPath = (explorer, type) => {
        if (type === 'address')
            return XevmNetwork.ExplorerAddressPath[explorer];
        if (type === 'tx')
            return XevmNetwork.ExplorerTxPath[explorer];
        return;
    };
})(XevmNetwork || (exports.XevmNetwork = XevmNetwork = {}));
//# sourceMappingURL=xevm.js.map