"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XahauNetwork = void 0;
const protocols_1 = require("../protocols");
const icons_1 = require("./common/icons");
const labels_1 = require("./common/labels");
class XahauNetwork {
    static protocol = protocols_1.Protocols.xrpl;
    static Types;
    static label = labels_1.NetworkLabels.xahau;
    static icon = icons_1.NetworkIcons.xahau;
    static asset = 'XAH';
    static active = true;
    static defaultReserves = {
        base: '1',
        inc: '0.2',
    };
}
exports.XahauNetwork = XahauNetwork;
(function (XahauNetwork) {
    let NetworkTypes;
    (function (NetworkTypes) {
        NetworkTypes["mainnet"] = "mainnet";
        NetworkTypes["testnet"] = "testnet";
        NetworkTypes["devnet"] = "devnet";
    })(NetworkTypes = XahauNetwork.NetworkTypes || (XahauNetwork.NetworkTypes = {}));
    let Explorers;
    (function (Explorers) {
        Explorers["bithomp"] = "bithomp";
        Explorers["xrplf"] = "xrplf";
        Explorers["xrplorg"] = "xrpl.org";
    })(Explorers = XahauNetwork.Explorers || (XahauNetwork.Explorers = {}));
    XahauNetwork.colors = {
        [XahauNetwork.NetworkTypes.mainnet]: 'tw-bg-[#38DBFF]',
        [XahauNetwork.NetworkTypes.devnet]: 'tw-bg-[#38FFDB]',
        [XahauNetwork.NetworkTypes.testnet]: 'tw-bg-[#DE7EFF]',
    };
    XahauNetwork.BithompHost = {
        [XahauNetwork.NetworkTypes.mainnet]: 'https://xahauexplorer.com',
        [XahauNetwork.NetworkTypes.testnet]: 'https://test.xahauexplorer.com',
        [XahauNetwork.NetworkTypes.devnet]: '',
    };
    XahauNetwork.XrplfHost = {
        [XahauNetwork.NetworkTypes.mainnet]: 'https://explorer.xahau.network',
        [XahauNetwork.NetworkTypes.testnet]: 'https://explorer.xahau-test.net',
        [XahauNetwork.NetworkTypes.devnet]: '',
    };
    XahauNetwork.XrplOrgHost = {
        [XahauNetwork.NetworkTypes.mainnet]: 'https://xahau.xrpl.org',
        [XahauNetwork.NetworkTypes.testnet]: 'https://xahau-testnet.xrpl.org',
        [XahauNetwork.NetworkTypes.devnet]: '',
    };
    XahauNetwork.Hosts = {
        [XahauNetwork.Explorers.bithomp]: XahauNetwork.BithompHost,
        [XahauNetwork.Explorers.xrplf]: XahauNetwork.XrplfHost,
        [XahauNetwork.Explorers.xrplorg]: XahauNetwork.XrplOrgHost,
    };
    XahauNetwork.ExplorerAddressPath = {
        [XahauNetwork.Explorers.bithomp]: '',
        [XahauNetwork.Explorers.xrplf]: '/address',
        [XahauNetwork.Explorers.xrplorg]: '/accounts',
    };
    XahauNetwork.ExplorerTxPath = {
        [XahauNetwork.Explorers.bithomp]: '',
        [XahauNetwork.Explorers.xrplf]: '/tx',
        [XahauNetwork.Explorers.xrplorg]: '/transactions',
    };
    XahauNetwork.getExplorerHost = (explorer, type) => {
        if (explorer === XahauNetwork.Explorers.bithomp)
            return XahauNetwork.BithompHost[type];
        if (explorer === XahauNetwork.Explorers.xrplf)
            return XahauNetwork.XrplfHost[type];
        if (explorer === XahauNetwork.Explorers.xrplorg)
            return XahauNetwork.XrplOrgHost[type];
        return;
    };
    XahauNetwork.getExplorerPath = (explorer, type) => {
        if (type === 'address')
            return XahauNetwork.ExplorerAddressPath[explorer];
        if (type === 'tx')
            return XahauNetwork.ExplorerTxPath[explorer];
        return;
    };
})(XahauNetwork || (exports.XahauNetwork = XahauNetwork = {}));
//# sourceMappingURL=xahau.js.map