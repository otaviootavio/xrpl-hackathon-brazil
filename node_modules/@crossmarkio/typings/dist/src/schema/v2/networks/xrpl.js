"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XrplLedgerNetwork = void 0;
const protocols_1 = require("../protocols");
const icons_1 = require("./common/icons");
const labels_1 = require("./common/labels");
class XrplLedgerNetwork {
    static protocol = protocols_1.Protocols.xrpl;
    static Types;
    static label = labels_1.NetworkLabels.xrpl;
    static icon = icons_1.NetworkIcons.xrpl;
    static asset = 'XRP';
    static active = true;
    static defaultReserves = {
        base: '10',
        inc: '2',
    };
}
exports.XrplLedgerNetwork = XrplLedgerNetwork;
(function (XrplLedgerNetwork) {
    let NetworkTypes;
    (function (NetworkTypes) {
        NetworkTypes["mainnet"] = "mainnet";
        NetworkTypes["testnet"] = "testnet";
        NetworkTypes["devnet"] = "devnet";
        NetworkTypes["xls30d"] = "xls30d";
        NetworkTypes["xls38d"] = "xls38d";
    })(NetworkTypes = XrplLedgerNetwork.NetworkTypes || (XrplLedgerNetwork.NetworkTypes = {}));
    let Explorers;
    (function (Explorers) {
        Explorers["bithomp"] = "bithomp";
        Explorers["xrplorg"] = "xrpl.org";
        Explorers["xrplf"] = "xrplf";
        Explorers["xrpscan"] = "xrpscan";
    })(Explorers = XrplLedgerNetwork.Explorers || (XrplLedgerNetwork.Explorers = {}));
    XrplLedgerNetwork.colors = {
        [XrplLedgerNetwork.NetworkTypes.mainnet]: 'tw-bg-[#38DBFF]',
        [XrplLedgerNetwork.NetworkTypes.testnet]: 'tw-bg-[#DE7EFF]',
        [XrplLedgerNetwork.NetworkTypes.devnet]: 'tw-bg-[#FFB648]',
        [XrplLedgerNetwork.NetworkTypes.xls30d]: 'tw-bg-[#FF9C7C]',
        [XrplLedgerNetwork.NetworkTypes.xls38d]: 'tw-bg-[#C34D27]',
    };
    XrplLedgerNetwork.BithompHost = {
        [XrplLedgerNetwork.NetworkTypes.mainnet]: 'https://bithomp.com/explorer',
        [XrplLedgerNetwork.NetworkTypes.testnet]: 'https://test.bithomp.com/explorer',
        [XrplLedgerNetwork.NetworkTypes.devnet]: 'https://dev.bithomp.com/explorer',
        [XrplLedgerNetwork.NetworkTypes.xls30d]: 'https://amm.bithomp.com/explorer',
        [XrplLedgerNetwork.NetworkTypes.xls38d]: '',
    };
    XrplLedgerNetwork.XrplfHost = {
        [XrplLedgerNetwork.NetworkTypes.mainnet]: 'https://explorer.xrplf.org',
        [XrplLedgerNetwork.NetworkTypes.testnet]: 'https://explorer-testnet.xrplf.org',
        [XrplLedgerNetwork.NetworkTypes.devnet]: '',
        [XrplLedgerNetwork.NetworkTypes.xls30d]: '',
        [XrplLedgerNetwork.NetworkTypes.xls38d]: '',
    };
    XrplLedgerNetwork.XrplOrgHost = {
        [XrplLedgerNetwork.NetworkTypes.mainnet]: 'https://livenet.xrpl.org',
        [XrplLedgerNetwork.NetworkTypes.testnet]: 'https://testnet.xrpl.org',
        [XrplLedgerNetwork.NetworkTypes.devnet]: 'https://devnet.xrpl.org',
        [XrplLedgerNetwork.NetworkTypes.xls30d]: '',
        [XrplLedgerNetwork.NetworkTypes.xls38d]: '',
    };
    XrplLedgerNetwork.XRPScanHost = {
        [XrplLedgerNetwork.NetworkTypes.mainnet]: 'https://xrpscan.com',
        [XrplLedgerNetwork.NetworkTypes.testnet]: '',
        [XrplLedgerNetwork.NetworkTypes.devnet]: '',
        [XrplLedgerNetwork.NetworkTypes.xls30d]: '',
        [XrplLedgerNetwork.NetworkTypes.xls38d]: '',
    };
    XrplLedgerNetwork.Hosts = {
        [XrplLedgerNetwork.Explorers.bithomp]: XrplLedgerNetwork.BithompHost,
        [XrplLedgerNetwork.Explorers.xrplf]: XrplLedgerNetwork.XrplfHost,
        [XrplLedgerNetwork.Explorers.xrplorg]: XrplLedgerNetwork.XrplOrgHost,
        [XrplLedgerNetwork.Explorers.xrpscan]: XrplLedgerNetwork.XRPScanHost,
    };
    XrplLedgerNetwork.ExplorerAddressPath = {
        [XrplLedgerNetwork.Explorers.bithomp]: '',
        [XrplLedgerNetwork.Explorers.xrplorg]: '/address',
        [XrplLedgerNetwork.Explorers.xrplf]: '',
        [XrplLedgerNetwork.Explorers.xrpscan]: '/account',
    };
    XrplLedgerNetwork.ExplorerTxPath = {
        [XrplLedgerNetwork.Explorers.bithomp]: '',
        [XrplLedgerNetwork.Explorers.xrplorg]: '/transactions',
        [XrplLedgerNetwork.Explorers.xrplf]: '/tx',
        [XrplLedgerNetwork.Explorers.xrpscan]: '/tx',
    };
    XrplLedgerNetwork.getExplorerHost = (explorer, type) => {
        if (explorer === XrplLedgerNetwork.Explorers.bithomp)
            return XrplLedgerNetwork.BithompHost[type];
        if (explorer === XrplLedgerNetwork.Explorers.xrplf)
            return XrplLedgerNetwork.XrplfHost[type];
        if (explorer === XrplLedgerNetwork.Explorers.xrplorg)
            return XrplLedgerNetwork.XrplOrgHost[type];
        if (explorer === XrplLedgerNetwork.Explorers.xrpscan)
            return XrplLedgerNetwork.XRPScanHost[type];
        return;
    };
    XrplLedgerNetwork.getExplorerPath = (explorer, type) => {
        if (type === 'address')
            return XrplLedgerNetwork.ExplorerAddressPath[explorer];
        if (type === 'tx')
            return XrplLedgerNetwork.ExplorerTxPath[explorer];
        return;
    };
})(XrplLedgerNetwork || (exports.XrplLedgerNetwork = XrplLedgerNetwork = {}));
//# sourceMappingURL=xrpl.js.map