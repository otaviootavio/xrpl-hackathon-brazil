"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeSchema = void 0;
const v2_1 = require("../../v2");
const v1_1 = require("../../v1");
const v1 = v1_1.Types;
class NodeSchema {
    uuid;
    id = 0;
    name = 'mainnet';
    protocol = v2_1.Types.AllProtocols.xrpl;
    network = v2_1.Types.AllNetworks.NetworkLabels.xrpl;
    type = v2_1.Types.AllNetworks.AllNodeTypes.xrpl.mainnet;
    status;
    default;
    wss = 'wss://xrplcluster.com';
    rpc = 'https://xrplcluster.com';
    explorer = v2_1.Types.AllNetworks.AllNodeExplorers.xrplExpl.bithomp;
    faucet = null;
    static migration = (oldValue) => {
        const Switch = {
            [v1.NetworkTypes.main]: v2_1.Types.AllNetworks.AllNodeTypes.xrpl.mainnet,
            [v1.NetworkTypes.live]: v2_1.Types.AllNetworks.AllNodeTypes.xrpl.mainnet,
            [v1.NetworkTypes.test]: v2_1.Types.AllNetworks.AllNodeTypes.xrpl.testnet,
            [v1.NetworkTypes.dev]: v2_1.Types.AllNetworks.AllNodeTypes.xrpl.devnet,
            [v1.NetworkTypes.experimental]: v2_1.Types.AllNetworks.AllNodeTypes.xrpl.devnet,
            [v1.NetworkTypes.hooks]: v2_1.Types.AllNetworks.AllNodeTypes.xahau.testnet,
            [v1.NetworkTypes.sidechain]: v2_1.Types.AllNetworks.AllNodeTypes.xrpl.xls38d,
            [v1.NetworkTypes.xahautest]: v2_1.Types.AllNetworks.AllNodeTypes.xahau.testnet,
            [v1.NetworkTypes.xls30]: v2_1.Types.AllNetworks.AllNodeTypes.xrpl.xls30d,
            [v1.NetworkTypes.xls38]: v2_1.Types.AllNetworks.AllNodeTypes.xrpl.xls38d,
        };
        let newType = Switch[oldValue.type] || v2_1.Types.AllNetworks.AllNodeTypes.xrpl.devnet;
        return Object.assign({}, oldValue, {
            protocol: v2_1.Types.AllProtocols.xrpl,
            network: v2_1.Types.AllNetworks.NetworkLabels.xrpl,
            type: newType,
        });
    };
}
exports.NodeSchema = NodeSchema;
//# sourceMappingURL=node.js.map