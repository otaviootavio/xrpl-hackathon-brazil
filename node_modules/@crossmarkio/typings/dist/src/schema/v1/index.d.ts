import * as Api from './api';
import { AES_GCM, AES_CBC } from '../../crypto/index';
export declare class Types {
    static Api: typeof Api;
}
export declare namespace Types {
    enum TWCardColor {
        color1 = "tw-bg-cardGradient1",
        color2 = "tw-bg-cardGradient2",
        color3 = "tw-bg-cardGradient3",
        color4 = "tw-bg-cardGradient4",
        color5 = "tw-bg-cardGradient5",
        color6 = "tw-bg-cardGradient6",
        color7 = "tw-bg-cardGradient7",
        color8 = "tw-bg-cardGradient8",
        color9 = "tw-bg-cardGradient9",
        color10 = "tw-bg-cardGradient10"
    }
    enum CardColor {
        color1 = "color1",
        color2 = "color2",
        color3 = "color3",
        color4 = "color4",
        color5 = "color5",
        color6 = "color6",
        color7 = "color7",
        color8 = "color8",
        color9 = "color9",
        color10 = "color10"
    }
    enum NetworkTypes {
        main = "main",
        live = "live",
        test = "test",
        dev = "dev",
        hooks = "hooks",
        experimental = "experimental",
        sidechain = "sidechain",
        xls30 = "xls-30d",
        xls38 = "xls-38d",
        xahautest = "xahau-test"
    }
    enum Protocol {
        xrpl = "XRPL",
        evm = "EVM",
        btc = "BTC",
        bsc = "BSC",
        ada = "ADA",
        sol = "SOL",
        usd = "USD"
    }
    enum XRPLExplorers {
        bithomp = "bithomp",
        xrplorg = "xrpl.org",
        xrplf = "xrplf",
        xrpscan = "xrpscan"
    }
    enum EVMExplorers {
        evmSideChain = "evm-sidechain"
    }
    interface ThemeArray {
        protocol: Types.Protocol;
        type: Types.NetworkTypes;
        color: Types.CardColor;
        skin?: string;
    }
    interface MappedAddresses {
        protocol: Types.Protocol;
        address: string;
        regularKey?: string;
        publicKey?: string | null;
        path?: string | null;
        algorithm?: Algorithm;
    }
    type Access = 'full' | 'partial' | 'observe';
    type Security = 'passcode' | 'password' | 'fingerprint' | 'face';
    type Algorithm = 'secp256k1' | 'ed25519' | null;
    type Encryption = typeof AES_CBC | typeof AES_GCM;
    const networkColorMap: {
        main: string;
        live: string;
        test: string;
        dev: string;
        experimental: string;
        sidechain: string;
        "xls-30d": string;
        "xls-38d": string;
        hooks: string;
        "xahau-test": string;
    };
    const BithompHost: {
        main: string;
        test: string;
        dev: string;
        "xls-30d": string;
        hooks: string;
        live: string;
        experimental: string;
        sidechain: string;
        "xls-38d": string;
        "xahau-test": string;
    };
    const XrplfHost: {
        main: string;
        test: string;
        hooks: string;
        dev: string;
        "xls-30d": string;
        live: string;
        experimental: string;
        sidechain: string;
        "xls-38d": string;
        "xahau-test": string;
    };
    const XrplOrgHost: {
        main: string;
        test: string;
        dev: string;
        "xls-30d": string;
        hooks: string;
        live: string;
        experimental: string;
        sidechain: string;
        "xls-38d": string;
        "xahau-test": string;
    };
    const XRPScanHost: {
        main: string;
        test: string;
        dev: string;
        "xls-30d": string;
        hooks: string;
        live: string;
        experimental: string;
        sidechain: string;
        "xls-38d": string;
        "xahau-test": string;
    };
    const EvmSideChainHost: {
        dev: string;
        main: string;
        test: string;
        "xls-30d": string;
        hooks: string;
        live: string;
        experimental: string;
        sidechain: string;
        "xls-38d": string;
        "xahau-test": string;
    };
    const ExplorerAddressPath: {
        bithomp: string;
        "xrpl.org": string;
        xrplf: string;
        xrpscan: string;
        "evm-sidechain": string;
    };
    const ExplorerTxPath: {
        bithomp: string;
        "xrpl.org": string;
        xrplf: string;
        xrpscan: string;
        "evm-sidechain": string;
    };
    type availableExplorers = XRPLExplorers | EVMExplorers;
    const availableProtocols: readonly [Protocol.xrpl, Protocol.evm];
}
