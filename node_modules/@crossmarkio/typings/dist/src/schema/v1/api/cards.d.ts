import { AES_GCM, AES_CBC } from '../../../crypto/index';
import { Types } from '../../v1';
export interface MappedAddresses {
    protocol: Types.Protocol;
    address: string;
    regularKey?: string;
    publicKey?: string | null;
    path?: string | null;
    algorithm?: Algorithm;
}
export declare enum TWCardColor {
    color1 = "tw-bg-cardGradient1",
    color2 = "tw-bg-cardGradient2",
    color3 = "tw-bg-cardGradient3",
    color4 = "tw-bg-cardGradient4",
    color5 = "tw-bg-cardGradient5",
    color6 = "tw-bg-cardGradient6",
    color7 = "tw-bg-cardGradient7",
    color8 = "tw-bg-cardGradient8",
    color9 = "tw-bg-cardGradient9",
    color10 = "tw-bg-cardGradient10"
}
export declare enum CardColor {
    color1 = "color1",
    color2 = "color2",
    color3 = "color3",
    color4 = "color4",
    color5 = "color5",
    color6 = "color6",
    color7 = "color7",
    color8 = "color8",
    color9 = "color9",
    color10 = "color10"
}
export interface ThemeArray {
    protocol: Types.Protocol;
    type: Types.NetworkTypes;
    color: CardColor;
    skin?: string;
}
type Access = 'full' | 'partial' | 'observe';
type Security = 'passcode' | 'password' | 'fingerprint' | 'face';
type Algorithm = 'secp256k1' | 'ed25519' | null;
type Encryption = typeof AES_CBC | AES_GCM;
export declare class CardSchema {
    id: string;
    address: string;
    label: string | undefined;
    source?: string;
    addresses?: MappedAddresses[];
    themes?: ThemeArray[];
    accessLevel?: Access;
    securityLevel?: Security;
    encryption?: Encryption;
    default: boolean;
    registeredAt: number;
    createdAt: number;
    updatedAt: number;
    static migration: (oldValue: any, newValue: any) => void;
}
export {};
