"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Types = void 0;
const Api = __importStar(require("./api"));
class Types {
    static Api = Api;
}
exports.Types = Types;
(function (Types) {
    let TWCardColor;
    (function (TWCardColor) {
        TWCardColor["color1"] = "tw-bg-cardGradient1";
        TWCardColor["color2"] = "tw-bg-cardGradient2";
        TWCardColor["color3"] = "tw-bg-cardGradient3";
        TWCardColor["color4"] = "tw-bg-cardGradient4";
        TWCardColor["color5"] = "tw-bg-cardGradient5";
        TWCardColor["color6"] = "tw-bg-cardGradient6";
        TWCardColor["color7"] = "tw-bg-cardGradient7";
        TWCardColor["color8"] = "tw-bg-cardGradient8";
        TWCardColor["color9"] = "tw-bg-cardGradient9";
        TWCardColor["color10"] = "tw-bg-cardGradient10";
    })(TWCardColor = Types.TWCardColor || (Types.TWCardColor = {}));
    let CardColor;
    (function (CardColor) {
        CardColor["color1"] = "color1";
        CardColor["color2"] = "color2";
        CardColor["color3"] = "color3";
        CardColor["color4"] = "color4";
        CardColor["color5"] = "color5";
        CardColor["color6"] = "color6";
        CardColor["color7"] = "color7";
        CardColor["color8"] = "color8";
        CardColor["color9"] = "color9";
        CardColor["color10"] = "color10";
    })(CardColor = Types.CardColor || (Types.CardColor = {}));
    let NetworkTypes;
    (function (NetworkTypes) {
        NetworkTypes["main"] = "main";
        NetworkTypes["live"] = "live";
        NetworkTypes["test"] = "test";
        NetworkTypes["dev"] = "dev";
        NetworkTypes["hooks"] = "hooks";
        NetworkTypes["experimental"] = "experimental";
        NetworkTypes["sidechain"] = "sidechain";
        NetworkTypes["xls30"] = "xls-30d";
        NetworkTypes["xls38"] = "xls-38d";
        NetworkTypes["xahautest"] = "xahau-test";
    })(NetworkTypes = Types.NetworkTypes || (Types.NetworkTypes = {}));
    let Protocol;
    (function (Protocol) {
        Protocol["xrpl"] = "XRPL";
        Protocol["evm"] = "EVM";
        Protocol["btc"] = "BTC";
        Protocol["bsc"] = "BSC";
        Protocol["ada"] = "ADA";
        Protocol["sol"] = "SOL";
        Protocol["usd"] = "USD";
    })(Protocol = Types.Protocol || (Types.Protocol = {}));
    let XRPLExplorers;
    (function (XRPLExplorers) {
        XRPLExplorers["bithomp"] = "bithomp";
        XRPLExplorers["xrplorg"] = "xrpl.org";
        XRPLExplorers["xrplf"] = "xrplf";
        XRPLExplorers["xrpscan"] = "xrpscan";
    })(XRPLExplorers = Types.XRPLExplorers || (Types.XRPLExplorers = {}));
    let EVMExplorers;
    (function (EVMExplorers) {
        EVMExplorers["evmSideChain"] = "evm-sidechain";
    })(EVMExplorers = Types.EVMExplorers || (Types.EVMExplorers = {}));
    Types.networkColorMap = {
        [Types.NetworkTypes.main]: 'tw-bg-[#38DBFF]',
        [Types.NetworkTypes.live]: 'tw-bg-[#38FFDB]',
        [Types.NetworkTypes.test]: 'tw-bg-[#DE7EFF]',
        [Types.NetworkTypes.dev]: 'tw-bg-[#FFB648]',
        [Types.NetworkTypes.experimental]: 'tw-bg-[#FF7B9B]',
        [Types.NetworkTypes.sidechain]: 'tw-bg-[#7CFF99]',
        [Types.NetworkTypes.xls30]: 'tw-bg-[#FF9C7C]',
        [Types.NetworkTypes.xls38]: 'tw-bg-[#C34D27]',
        [Types.NetworkTypes.hooks]: 'tw-bg-[#CF4C27]',
        [Types.NetworkTypes.xahautest]: 'tw-bg-[#CF4C27]',
    };
    Types.BithompHost = {
        [Types.NetworkTypes.main]: 'https://bithomp.com/explorer',
        [Types.NetworkTypes.test]: 'https://test.bithomp.com/explorer',
        [Types.NetworkTypes.dev]: 'https://dev.bithomp.com/explorer',
        [Types.NetworkTypes.xls30]: 'https://amm.bithomp.com/explorer',
        [Types.NetworkTypes.hooks]: 'https://beta.bithomp.com/explorer',
        [Types.NetworkTypes.live]: 'https://bithomp.com/explorer',
        [Types.NetworkTypes.experimental]: '',
        [Types.NetworkTypes.sidechain]: '',
        [Types.NetworkTypes.xls38]: '',
        [Types.NetworkTypes.xahautest]: 'https://test.xahauexplorer.com/explorer',
    };
    Types.XrplfHost = {
        [Types.NetworkTypes.main]: 'https://explorer.xrplf.org',
        [Types.NetworkTypes.test]: 'https://explorer-testnet.xrplf.org',
        [Types.NetworkTypes.hooks]: 'https://hooks-testnet-v3-explorer.xrpl-labs.com',
        [Types.NetworkTypes.dev]: '',
        [Types.NetworkTypes.xls30]: '',
        [Types.NetworkTypes.live]: '',
        [Types.NetworkTypes.experimental]: '',
        [Types.NetworkTypes.sidechain]: '',
        [Types.NetworkTypes.xls38]: '',
        [Types.NetworkTypes.xahautest]: 'https://explorer.xahau-test.net',
    };
    Types.XrplOrgHost = {
        [Types.NetworkTypes.main]: 'https://livenet.xrpl.org',
        [Types.NetworkTypes.test]: 'https://testnet.xrpl.org',
        [Types.NetworkTypes.dev]: 'https://devnet.xrpl.org',
        [Types.NetworkTypes.xls30]: '',
        [Types.NetworkTypes.hooks]: '',
        [Types.NetworkTypes.live]: '',
        [Types.NetworkTypes.experimental]: '',
        [Types.NetworkTypes.sidechain]: '',
        [Types.NetworkTypes.xls38]: '',
        [Types.NetworkTypes.xahautest]: '',
    };
    Types.XRPScanHost = {
        [Types.NetworkTypes.main]: 'https://xrpscan.com',
        [Types.NetworkTypes.test]: '',
        [Types.NetworkTypes.dev]: '',
        [Types.NetworkTypes.xls30]: '',
        [Types.NetworkTypes.hooks]: '',
        [Types.NetworkTypes.live]: '',
        [Types.NetworkTypes.experimental]: '',
        [Types.NetworkTypes.sidechain]: '',
        [Types.NetworkTypes.xls38]: '',
        [Types.NetworkTypes.xahautest]: '',
    };
    Types.EvmSideChainHost = {
        [Types.NetworkTypes.dev]: 'https://evm-sidechain.xrpl.org',
        [Types.NetworkTypes.main]: '',
        [Types.NetworkTypes.test]: '',
        [Types.NetworkTypes.xls30]: '',
        [Types.NetworkTypes.hooks]: '',
        [Types.NetworkTypes.live]: '',
        [Types.NetworkTypes.experimental]: '',
        [Types.NetworkTypes.sidechain]: '',
        [Types.NetworkTypes.xls38]: '',
        [Types.NetworkTypes.xahautest]: '',
    };
    Types.ExplorerAddressPath = {
        [Types.XRPLExplorers.bithomp]: '',
        [Types.XRPLExplorers.xrplorg]: '/address',
        [Types.XRPLExplorers.xrplf]: '',
        [Types.XRPLExplorers.xrpscan]: '/account',
        [Types.EVMExplorers.evmSideChain]: '/address',
    };
    Types.ExplorerTxPath = {
        [Types.XRPLExplorers.bithomp]: '',
        [Types.XRPLExplorers.xrplorg]: '/transactions',
        [Types.XRPLExplorers.xrplf]: '/tx',
        [Types.XRPLExplorers.xrpscan]: '/tx',
        [Types.EVMExplorers.evmSideChain]: '/tx',
    };
    Types.availableProtocols = [Types.Protocol.xrpl, Types.Protocol.evm];
})(Types || (exports.Types = Types = {}));
//# sourceMappingURL=index.js.map