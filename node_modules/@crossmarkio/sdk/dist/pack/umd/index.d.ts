/// <reference types="node" />
import * as _crossmarkio_typings_dist_src_extension from '@crossmarkio/typings/dist/src/extension';
import * as _crossmarkio_typings_dist_src_crossmark_models_verify from '@crossmarkio/typings/dist/src/crossmark/models/verify';
import * as _crossmarkio_typings_dist_src_crossmark_models_version from '@crossmarkio/typings/dist/src/crossmark/models/version';
import * as _crossmarkio_typings_dist_src_crossmark_models_isLocked from '@crossmarkio/typings/dist/src/crossmark/models/isLocked';
import * as _crossmarkio_typings_dist_src_crossmark_models from '@crossmarkio/typings/dist/src/crossmark/models';
import * as _crossmarkio_typings_dist_src_crossmark_models_bulkSignAndSubmit from '@crossmarkio/typings/dist/src/crossmark/models/bulkSignAndSubmit';
import * as _crossmarkio_typings_dist_src_crossmark_models_bulkSubmit from '@crossmarkio/typings/dist/src/crossmark/models/bulkSubmit';
import * as _crossmarkio_typings_dist_src_crossmark_models_bulkSign from '@crossmarkio/typings/dist/src/crossmark/models/bulkSign';
import * as _crossmarkio_typings_dist_src_crossmark_models_signAndSubmit from '@crossmarkio/typings/dist/src/crossmark/models/signAndSubmit';
import * as _crossmarkio_typings_dist_src_crossmark_models_submit from '@crossmarkio/typings/dist/src/crossmark/models/submit';
import * as _crossmarkio_typings_dist_src_crossmark_models_sign from '@crossmarkio/typings/dist/src/crossmark/models/sign';
import * as _crossmarkio_typings_dist_src_crossmark_models_signIn from '@crossmarkio/typings/dist/src/crossmark/models/signIn';
import EventEmitter from 'events';
import typings from '@crossmarkio/typings';

declare interface xEventsEmitter {
    on(event: typeof typings.extension.Extension.EVENTS.PING, listener: () => void): this;
    on(event: typeof typings.extension.Extension.EVENTS.CLOSE, listener: () => void): this;
    on(event: typeof typings.extension.Extension.EVENTS.OPEN, listener: () => void): this;
    on(event: typeof typings.extension.Extension.EVENTS.SIGNOUT, listener: () => void): this;
    on(event: typeof typings.extension.Extension.EVENTS.USER_CHANGE, listener: (user: typeof typings.schema.latest.Types.BasicUser) => void): this;
    on(event: typeof typings.extension.Extension.EVENTS.NETWORK_CHANGE, listener: (network: typeof typings.schema.latest.Types.BasicNetwork) => void): this;
    on(event: typeof typings.extension.Extension.EVENTS.RESPONSE, listener: (resp: typeof typings.crossmark.models.Models.Response) => void): this;
    on(event: typeof typings.extension.Extension.EVENTS.ALL, listener: (all: typeof typings.extension.Extension.CatchAllEvent) => void): this;
    on(event: string, listener: Function): this;
}
declare class xEventsEmitter extends EventEmitter {
    constructor();
}

interface ActiveRequest {
    resolve: (value: unknown) => void;
    reject: (value: unknown) => void;
}
declare class Api extends xEventsEmitter {
    #private;
    [x: string]: unknown;
    active: Map<string, ActiveRequest>;
    uuid: string;
    connected: boolean;
    target: string | undefined;
    timestamp: number | undefined;
    constructor();
    awaitRequest: (request: Partial<typeof typings.crossmark.models.Models.Request>) => Promise<_crossmarkio_typings_dist_src_crossmark_models.Models.FullResponse>;
    request: (request: Partial<typeof typings.crossmark.models.Models.Request>) => string;
}

declare class Browser {
    isOpera: boolean;
    isFirefox: boolean;
    isSafari: boolean;
    isIE: boolean;
    isEdge: boolean;
    isChrome: boolean;
    isBlink: boolean;
    isArc: boolean;
    constructor();
}
declare const _default$2: Browser;

declare class Env {
    isAndroid: boolean;
    isIos: boolean;
    isOpera: boolean;
    isWindows: boolean;
    isSSR: boolean;
    isXApp: boolean;
    isMobile: boolean;
    isDesktop: boolean;
    constructor();
}
declare const _default$1: Env;

declare const enum State {
    active = "active",
    unactive = "unactive",
    error = "error"
}
declare class Session {
    sdk: Sdk;
    user?: typeof typings.extension.Extension.BasicUser;
    network?: typeof typings.extension.Extension.BasicNetwork;
    address?: string;
    isOpen: boolean;
    lastPing?: number;
    state: State;
    responses: Map<string, _crossmarkio_typings_dist_src_crossmark_models.Models.FullResponse>;
    constructor(sdk: Sdk);
    handleDetect: () => Promise<void>;
    handlePing: () => number;
    handleClose: () => boolean;
    handleOpen: () => boolean;
    handleSignOut: () => void;
    handleNetworkChange: (network: {
        network: typeof typings.extension.Extension.BasicNetwork;
    }) => void;
    handleUserChange: (user: {
        user: typeof typings.extension.Extension.BasicUser;
    }) => void;
    handleResponse: (resp: typeof typings.crossmark.models.Models.FullResponse) => void;
}

declare class Sdk extends xEventsEmitter {
    #private;
    [x: string]: unknown;
    api: Api;
    session: Session;
    browser: typeof _default$2;
    env: typeof _default$1;
    constructor();
    signIn: (hex?: string) => string;
    signInAndWait: (hex?: string) => Promise<_crossmarkio_typings_dist_src_crossmark_models_signIn.SignInFullResponse>;
    sign: (tx: typeof typings.crossmark.models.Models.AllTransactionRequest, opts?: typeof typings.crossmark.models.Models.SignOpts) => string;
    signAndWait: (tx: typeof typings.crossmark.models.Models.AllTransactionRequest, opts?: typeof typings.crossmark.models.Models.SignOpts) => Promise<_crossmarkio_typings_dist_src_crossmark_models_sign.SignFullResponse>;
    submit: (address: string, txblob: string, opts?: typeof typings.crossmark.models.Models.SignOpts) => string;
    submitAndWait: (address: string, txblob: string, opts?: typeof typings.crossmark.models.Models.SignOpts) => Promise<_crossmarkio_typings_dist_src_crossmark_models_submit.SubmitFullResponse>;
    signAndSubmit: (tx: typeof typings.crossmark.models.Models.AllTransactionRequest, opts?: typeof typings.crossmark.models.Models.SignOpts) => string;
    signAndSubmitAndWait: (tx: typeof typings.crossmark.models.Models.AllTransactionRequest, opts?: typeof typings.crossmark.models.Models.SignOpts) => Promise<_crossmarkio_typings_dist_src_crossmark_models_signAndSubmit.SignAndSubmitFullResponse>;
    bulkSign: (txns: (typeof typings.crossmark.models.Models.SignTransaction)[], opts?: typeof typings.crossmark.models.Models.SignOpts) => string;
    bulkSignAndWait: (txns: (typeof typings.crossmark.models.Models.SignTransaction)[], opts?: typeof typings.crossmark.models.Models.SignOpts) => Promise<_crossmarkio_typings_dist_src_crossmark_models_bulkSign.BulkSignFullResponse>;
    bulkSubmit: (address: string, txblobs: string[], opts?: typeof typings.crossmark.models.Models.SignOpts) => string;
    bulkSubmitAndWait: (address: string, txblobs: string[], opts?: typeof typings.crossmark.models.Models.SignOpts) => Promise<_crossmarkio_typings_dist_src_crossmark_models_bulkSubmit.BulkSubmitFullResponse>;
    bulkSignAndSubmit: (txns: (typeof typings.crossmark.models.Models.SignTransaction)[], opts?: typeof typings.crossmark.models.Models.SignOpts) => string;
    bulkSignAndSubmitAndWait: (txns: (typeof typings.crossmark.models.Models.SignTransaction)[], opts?: typeof typings.crossmark.models.Models.SignOpts) => Promise<_crossmarkio_typings_dist_src_crossmark_models_bulkSignAndSubmit.BulkSignAndSubmitFullResponse>;
    getResponse: (id: string) => _crossmarkio_typings_dist_src_crossmark_models.Models.FullResponse | undefined;
    connect: (timeout: number) => Promise<boolean>;
    isConnected: () => boolean | undefined;
    isLocked: () => string;
    isLockedAndWait: () => Promise<_crossmarkio_typings_dist_src_crossmark_models_isLocked.IsLockedFullResponse>;
    isOpen: () => boolean;
    version: () => string;
    versionAndWait: () => Promise<_crossmarkio_typings_dist_src_crossmark_models_version.VersionFullResponse>;
    verify: (hex: string) => string;
    verifyAndWait: (hex: string) => Promise<_crossmarkio_typings_dist_src_crossmark_models_verify.VerifyFullResponse>;
    getAddress: () => string | undefined;
    getNetwork: () => _crossmarkio_typings_dist_src_extension.Extension.BasicNetwork | undefined;
    getUser: () => _crossmarkio_typings_dist_src_extension.Extension.BasicUser | undefined;
}

declare const _default: Sdk;

export { Api, _default$2 as Browser, _default$1 as Env, xEventsEmitter as EventEmitter, _default as default };
